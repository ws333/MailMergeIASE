// mergeContacts.ts generated by Grok 3 beta
import { ContactI3C, ImportData, ImportStats } from "../types/typesI3C";

export interface ContactState {
    active: ContactI3C[]; // List of currently active contacts (deletionDate = 0)
    deleted: ContactI3C[]; // List of deleted contacts (deletionDate > 0)
    lastImportExportDate: number; // Timestamp of the most recent import/export applied
}

type ImportContactsStats = Pick<ImportStats, "contactsDeleted" | "contactsProcessed">;

// Merges imported contact data into the current state, handling both active and deleted contacts separately
export function mergeContacts(current: ContactState, importData: ImportData): [ContactState, ImportContactsStats] {
    const newActive = [...current.active];
    const newDeleted = [...current.deleted];

    const importContactsStats: ImportContactsStats = {
        contactsDeleted: 0,
        contactsProcessed: 0,
    };

    if (importData.metadata.lastImportExportDate > importData.metadata.exportDate) {
        throw new Error(
            `Imported lastImportExportDate (${importData.metadata.lastImportExportDate}) is newer than exportDate (${importData.metadata.exportDate}), indicating an invalid export file.`
        );
    }

    // Merge active contacts from the import
    for (const importContact of importData.contacts.active) {
        const activeIndex = newActive.findIndex((c) => c.uid === importContact.uid);
        const deletedIndex = newDeleted.findIndex((c) => c.uid === importContact.uid);

        if (activeIndex !== -1) {
            const currentContact = newActive[activeIndex];
            importContactsStats.contactsProcessed++;

            if (importContact.sentDate > currentContact.sentDate) {
                newActive[activeIndex] = {
                    ...currentContact,
                    sentDate: importContact.sentDate,
                    sentCount: importContact.sentCount,
                    deletionDate: 0,
                    customFrontend01: importContact.customFrontend01,
                    customFrontend02: importContact.customFrontend02,
                };
            } else if (
                importContact.sentDate <= currentContact.sentDate &&
                importData.metadata.exportDate > current.lastImportExportDate
            ) {
                newActive[activeIndex] = {
                    ...currentContact,
                    sentCount: currentContact.sentCount + importContact.sentCount,
                    customFrontend01: importContact.customFrontend01,
                    customFrontend02: importContact.customFrontend02,
                };
            }
        } else if (deletedIndex !== -1) {
            // Skip if already deleted; import as active doesnâ€™t resurrect unless explicitly moved
            continue;
        } else {
            // New contact from import, add to deleted list per original requirement
            newDeleted.push({
                uid: importContact.uid,
                nation: "",
                institution: "",
                subGroup: "",
                name: "",
                email: "",
                sentDate: importContact.sentDate,
                sentCount: importContact.sentCount,
                updatedDate: "",
                customBackend01: "",
                customBackend02: "",
                customFrontend01: importContact.customFrontend01,
                customFrontend02: importContact.customFrontend02,
                deletionDate: importData.metadata.exportDate,
            });
            importContactsStats.contactsDeleted++;
        }
    }

    // Merge deleted contacts from the import
    for (const importContact of importData.contacts.deleted) {
        const activeIndex = newActive.findIndex((c) => c.uid === importContact.uid);
        const deletedIndex = newDeleted.findIndex((c) => c.uid === importContact.uid);

        if (activeIndex !== -1) {
            const currentContact = newActive[activeIndex];
            newActive.splice(activeIndex, 1);
            newDeleted.push({
                ...currentContact,
                sentDate: importContact.sentDate,
                sentCount: importContact.sentCount,
                deletionDate: importContact.deletionDate,
                customFrontend01: importContact.customFrontend01,
                customFrontend02: importContact.customFrontend02,
            });
            importContactsStats.contactsDeleted++;
        } else if (deletedIndex !== -1) {
            const deletedContact = newDeleted[deletedIndex];
            if (
                importContact.sentDate > deletedContact.sentDate &&
                importData.metadata.exportDate > current.lastImportExportDate
            ) {
                newDeleted[deletedIndex] = {
                    ...deletedContact,
                    sentDate: importContact.sentDate,
                    sentCount: importContact.sentCount,
                    deletionDate: importContact.deletionDate,
                    customFrontend01: importContact.customFrontend01,
                    customFrontend02: importContact.customFrontend02,
                };
            } else if (
                importContact.sentDate <= deletedContact.sentDate &&
                importContact.sentDate <= deletedContact.deletionDate &&
                importData.metadata.exportDate > current.lastImportExportDate
            ) {
                newDeleted[deletedIndex] = {
                    ...deletedContact,
                    sentCount: deletedContact.sentCount + importContact.sentCount,
                    customFrontend01: importContact.customFrontend01,
                    customFrontend02: importContact.customFrontend02,
                };
            }
        } else {
            newDeleted.push({
                uid: importContact.uid,
                nation: "",
                institution: "",
                subGroup: "",
                name: "",
                email: "",
                sentDate: importContact.sentDate,
                sentCount: importContact.sentCount,
                updatedDate: "",
                customBackend01: "",
                customBackend02: "",
                customFrontend01: importContact.customFrontend01,
                customFrontend02: importContact.customFrontend02,
                deletionDate: importContact.deletionDate,
            });
            importContactsStats.contactsDeleted++;
        }
    }

    const newLastImportExportDate =
        importData.metadata.exportDate > current.lastImportExportDate
            ? importData.metadata.exportDate
            : current.lastImportExportDate;

    return [
        { active: newActive, deleted: newDeleted, lastImportExportDate: newLastImportExportDate },
        importContactsStats,
    ];
}

export function deleteContact(state: ContactState, uid: number, deletionTime: number): ContactState {
    const activeIndex = state.active.findIndex((c) => c.uid === uid);
    if (activeIndex === -1) return state;

    const contact = state.active[activeIndex];
    const newActive = state.active.filter((_, i) => i !== activeIndex);
    const newDeleted = [...state.deleted, { ...contact, deletionDate: deletionTime }];

    return { active: newActive, deleted: newDeleted, lastImportExportDate: state.lastImportExportDate };
}

export function getDeletedSentCount(state: ContactState): number {
    return state.deleted.reduce((sum, c) => sum + c.sentCount, 0);
}
