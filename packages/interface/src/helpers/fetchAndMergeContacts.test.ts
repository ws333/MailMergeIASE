// src/helpers/fetchAndMergeContacts.test.ts generated by Grok 3 beta
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import { ContactI3C } from "./mergeContacts";

// Adjust path

// Define mocks at the top
const mockCsvParse = vi.fn();
const mockFetch = vi.fn();
const mockGetLocalStorageActiveContacts = vi.fn();
const mockGetLocalStorageDeletedContacts = vi.fn();
const mockSaveLocalStorageDeletedContacts = vi.fn();

// Mock './contacts' where storage functions are defined
vi.mock("./localStorage", async (importOriginal) => {
    const mod = await importOriginal<typeof import("./localStorage")>();
    return {
        ...mod,
        getLocalStorageActiveContacts: mockGetLocalStorageActiveContacts,
        getLocalStorageDeletedContacts: mockGetLocalStorageDeletedContacts,
        saveLocalStorageDeletedContacts: mockSaveLocalStorageDeletedContacts,
    };
});

describe("fetchAndMergeContacts", () => {
    const mockDateNow = 1677600000000; // Feb 28, 2023, 08:40:00 UTC
    let abortController: AbortController;
    let fetchAndMergeContacts: typeof import("./fetchAndMergeContacts").fetchAndMergeContacts;

    const mockFetchFn = vi.fn(async (signal: AbortSignal): Promise<ContactI3C[]> => {
        const response = await mockFetch("some-url", { signal });
        const csvText = await response.text();
        return mockCsvParse(csvText).data;
    });

    beforeEach(async () => {
        // Dynamically import the module after mocks are set up
        ({ fetchAndMergeContacts } = await import("./fetchAndMergeContacts"));

        vi.useFakeTimers();
        vi.setSystemTime(mockDateNow);
        vi.clearAllMocks();
        console.table = vi.fn();
        abortController = new AbortController();

        mockFetch.mockReset();
        mockCsvParse.mockReset();
        mockGetLocalStorageActiveContacts.mockReset();
        mockGetLocalStorageDeletedContacts.mockReset();
        mockSaveLocalStorageDeletedContacts.mockReset();
    });

    afterEach(() => {
        vi.useRealTimers();
    });

    it("handles empty online and local contacts", async () => {
        mockFetch.mockResolvedValue({ text: async () => "" });
        mockCsvParse.mockReturnValue({ data: [] });
        mockGetLocalStorageActiveContacts.mockReturnValue([]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([]);

        const result = await fetchAndMergeContacts(abortController.signal, mockFetchFn);
        expect(result).toEqual([]);
        expect(mockSaveLocalStorageDeletedContacts).toHaveBeenCalledWith([]);
    });

    it("handles empty online contacts with local contacts (all deleted)", async () => {
        mockFetch.mockResolvedValue({ text: async () => "" });
        mockCsvParse.mockReturnValue({ data: [] });
        mockGetLocalStorageActiveContacts.mockReturnValue([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test",
                email: "test@example.com",
                sentDate: 1677580000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([]);

        const result = await fetchAndMergeContacts(abortController.signal, mockFetchFn);
        expect(result).toEqual([]);
        expect(mockSaveLocalStorageDeletedContacts).toHaveBeenCalledWith([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test",
                email: "test@example.com",
                sentDate: 1677580000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: mockDateNow,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
    });

    it("handles online contacts with empty local contacts", async () => {
        mockFetch.mockResolvedValue({
            text: async () =>
                "uid,nation,institution,subGroup,name,email,sentDate,sentCount,updatedDate,deletionDate,customBackend01,customBackend02,customFrontend01,customFrontend02\n" +
                "1,US,Inst,Group,Test,test@example.com,1677580000000,1,2023-01-01,0,CB1,CB2,,",
        });
        mockCsvParse.mockReturnValue({
            data: [
                {
                    uid: 1,
                    nation: "US",
                    institution: "Inst",
                    subGroup: "Group",
                    name: "Test",
                    email: "test@example.com",
                    sentDate: 1677580000000,
                    sentCount: 1,
                    updatedDate: "2023-01-01",
                    deletionDate: 0,
                    customBackend01: "CB1",
                    customBackend02: "CB2",
                    customFrontend01: "",
                    customFrontend02: "",
                },
            ],
        });
        mockGetLocalStorageActiveContacts.mockReturnValue([]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([]);

        const result = await fetchAndMergeContacts(abortController.signal, mockFetchFn);
        expect(result).toEqual([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test",
                email: "test@example.com",
                sentDate: 1677580000000,
                sentCount: 1,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "",
                customFrontend02: "",
            },
        ]);
        expect(mockSaveLocalStorageDeletedContacts).toHaveBeenCalledWith([]);
    });

    it("merges overlapping contacts with local data preserved", async () => {
        mockFetch.mockResolvedValue({
            text: async () =>
                "uid,nation,institution,subGroup,name,email,sentDate,sentCount,updatedDate,deletionDate,customBackend01,customBackend02,customFrontend01,customFrontend02\n" +
                "1,US,Inst,Group,Test,test@example.com,1677570000000,1,2023-01-01,0,CB1,CB2,,",
        });
        mockCsvParse.mockReturnValue({
            data: [
                {
                    uid: 1,
                    nation: "US",
                    institution: "Inst",
                    subGroup: "Group",
                    name: "Test",
                    email: "test@example.com",
                    sentDate: 1677570000000,
                    sentCount: 1,
                    updatedDate: "2023-01-01",
                    deletionDate: 0,
                    customBackend01: "CB1",
                    customBackend02: "CB2",
                    customFrontend01: "",
                    customFrontend02: "",
                },
            ],
        });
        mockGetLocalStorageActiveContacts.mockReturnValue([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test",
                email: "test@example.com",
                sentDate: 1677580000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1-old",
                customBackend02: "CB2-old",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([]);

        const result = await fetchAndMergeContacts(abortController.signal, mockFetchFn);
        expect(result).toEqual([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test",
                email: "test@example.com",
                sentDate: 1677580000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
        expect(mockSaveLocalStorageDeletedContacts).toHaveBeenCalledWith([]);
    });

    it("handles local contact not in online (deleted)", async () => {
        mockFetch.mockResolvedValue({
            text: async () =>
                "uid,nation,institution,subGroup,name,email,sentDate,sentCount,updatedDate,deletionDate,customBackend01,customBackend02,customFrontend01,customFrontend02\n" +
                "1,US,Inst,Group,Test1,test1@example.com,1677580000000,1,2023-01-01,0,CB1,CB2,,",
        });
        mockCsvParse.mockReturnValue({
            data: [
                {
                    uid: 1,
                    nation: "US",
                    institution: "Inst",
                    subGroup: "Group",
                    name: "Test1",
                    email: "test1@example.com",
                    sentDate: 1677580000000,
                    sentCount: 1,
                    updatedDate: "2023-01-01",
                    deletionDate: 0,
                    customBackend01: "CB1",
                    customBackend02: "CB2",
                    customFrontend01: "",
                    customFrontend02: "",
                },
            ],
        });
        mockGetLocalStorageActiveContacts.mockReturnValue([
            {
                uid: 2,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test2",
                email: "test2@example.com",
                sentDate: 1677580000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([]);

        const result = await fetchAndMergeContacts(abortController.signal, mockFetchFn);
        expect(result).toEqual([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test1",
                email: "test1@example.com",
                sentDate: 1677580000000,
                sentCount: 1,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "",
                customFrontend02: "",
            },
        ]);
        expect(mockSaveLocalStorageDeletedContacts).toHaveBeenCalledWith([
            {
                uid: 2,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test2",
                email: "test2@example.com",
                sentDate: 1677580000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: mockDateNow,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
    });

    it("merges new deleted contacts with existing deleted contacts", async () => {
        mockFetch.mockResolvedValue({ text: async () => "" });
        mockCsvParse.mockReturnValue({ data: [] });
        mockGetLocalStorageActiveContacts.mockReturnValue([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test1",
                email: "test1@example.com",
                sentDate: 1677580000000,
                sentCount: 1,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([
            {
                uid: 2,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test2",
                email: "test2@example.com",
                sentDate: 1677570000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: 1677590000000,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1-old",
                customFrontend02: "CF2-old",
            },
        ]);

        const result = await fetchAndMergeContacts(abortController.signal, mockFetchFn);
        expect(result).toEqual([]);
        expect(mockSaveLocalStorageDeletedContacts).toHaveBeenCalledWith([
            {
                uid: 2,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test2",
                email: "test2@example.com",
                sentDate: 1677570000000,
                sentCount: 2,
                updatedDate: "2023-01-01",
                deletionDate: 1677590000000,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1-old",
                customFrontend02: "CF2-old",
            },
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test1",
                email: "test1@example.com",
                sentDate: 1677580000000,
                sentCount: 1,
                updatedDate: "2023-01-01",
                deletionDate: mockDateNow,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "CF1",
                customFrontend02: "CF2",
            },
        ]);
    });

    it("handles abort signal", async () => {
        mockFetch.mockRejectedValue(new DOMException("Aborted", "AbortError"));
        mockGetLocalStorageActiveContacts.mockReturnValue([]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([]);

        const abortingController = new AbortController();
        abortingController.abort();
        await expect(fetchAndMergeContacts(abortingController.signal, mockFetchFn)).rejects.toThrow("Aborted");
        expect(mockSaveLocalStorageDeletedContacts).not.toHaveBeenCalled();
    });

    it("handles local contact with missing fields", async () => {
        mockFetch.mockResolvedValue({
            text: async () =>
                "uid,nation,institution,subGroup,name,email,sentDate,sentCount,updatedDate,deletionDate,customBackend01,customBackend02,customFrontend01,customFrontend02\n" +
                "1,US,Inst,Group,Test,test@example.com,1677570000000,1,2023-01-01,0,CB1,CB2,,",
        });
        mockCsvParse.mockReturnValue({
            data: [
                {
                    uid: 1,
                    nation: "US",
                    institution: "Inst",
                    subGroup: "Group",
                    name: "Test",
                    email: "test@example.com",
                    sentDate: 1677570000000,
                    sentCount: 1,
                    updatedDate: "2023-01-01",
                    deletionDate: 0,
                    customBackend01: "CB1",
                    customBackend02: "CB2",
                    customFrontend01: "",
                    customFrontend02: "",
                },
            ],
        });
        mockGetLocalStorageActiveContacts.mockReturnValue([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test",
                email: "test@example.com",
                sentDate: 0,
                sentCount: 0,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1-old",
                customBackend02: "CB2-old",
                customFrontend01: "",
                customFrontend02: "",
            },
        ]);
        mockGetLocalStorageDeletedContacts.mockReturnValue([]);

        const result = await fetchAndMergeContacts(abortController.signal, mockFetchFn);
        expect(result).toEqual([
            {
                uid: 1,
                nation: "US",
                institution: "Inst",
                subGroup: "Group",
                name: "Test",
                email: "test@example.com",
                sentDate: 1677570000000,
                sentCount: 1,
                updatedDate: "2023-01-01",
                deletionDate: 0,
                customBackend01: "CB1",
                customBackend02: "CB2",
                customFrontend01: "",
                customFrontend02: "",
            },
        ]);
        expect(mockSaveLocalStorageDeletedContacts).toHaveBeenCalledWith([]);
    });
});
